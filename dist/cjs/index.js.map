{"version":3,"sources":["index.ts"],"sourcesContent":["require('./polyfills.ts');\nconst path = require('path');\nconst cp = require('child_process');\nconst fs = require('fs');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst serialize = require('serialize-javascript');\nconst mkdirp = require('mkdirp');\nconst shortHash = require('short-hash');\nconst sleep = require('thread-sleep-compat');\n\nconst versionExecPath = require('./versionExecPath.ts');\nconst SLEEP_MS = 60;\n\nfunction unlinkSafe(filename) {\n  try {\n    fs.unlinkSync(filename);\n  } catch {\n    // skip\n  }\n}\n\nexport default function call(version: string, filePath: string /* arguments */): any {\n  const args = Array.prototype.slice.call(arguments, 2);\n  const workerData = { filePath, args, env: process.env, cwd: process.cwd() };\n\n  // local - just call\n  if (version === 'local') {\n    const fn = require(workerData.filePath);\n    return typeof fn == 'function' ? fn.apply(null, workerData.args) : fn;\n  }\n\n  const temp = path.join(tmpdir(), 'node-version-call', shortHash(process.cwd()));\n  const input = path.join(temp, suffix('input'));\n  const output = path.join(temp, suffix('output'));\n\n  // store data to a file\n  mkdirp.sync(path.dirname(input));\n  fs.writeFileSync(input, serialize(workerData, { unsafe: true }), 'utf8');\n  unlinkSafe(output);\n\n  // call the function\n  const execPath = versionExecPath(version);\n  const worker = path.join(__dirname, 'worker.js');\n  cp.exec(`\"${execPath}\" \"${worker}\" \"${input}\" \"${output}\"`);\n  while (!fs.existsSync(output)) {\n    sleep(SLEEP_MS);\n  }\n  // get data and clean up\n  const res = eval(`(${fs.readFileSync(output, 'utf8')})`);\n  unlinkSafe(input);\n  unlinkSafe(output);\n\n  // throw error from the worker\n  if (res.error) {\n    const err = new Error(res.error.message);\n    if (res.error.stack) err.stack = res.error.stack;\n    throw err;\n  }\n  return res.value;\n}\n"],"names":["require","call","version","filePath","args","Array","prototype","slice","arguments","workerData","env","process","cwd","fn","apply","temp","path","join","tmpdir","shortHash","input","suffix","output","mkdirp","sync","dirname","fs","writeFileSync","serialize","unsafe","unlinkSafe","execPath","versionExecPath","worker","__dirname","cp","exec","existsSync","sleep","SLEEP_MS","res","eval","readFileSync","error","err","Error","message","stack","value","filename","unlinkSync"],"mappings":"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"}