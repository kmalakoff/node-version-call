{"version":3,"sources":["worker.ts"],"sourcesContent":["const fs = require('fs');\nconst JSONBuffer = require('json-buffer');\nconst assign = require('just-extend');\nconst callFn = require('./callFn');\n\n// get data\nconst input = process.argv[2];\nconst output = process.argv[3];\nconst callData = JSONBuffer.parse(fs.readFileSync(input, 'utf8'));\n\n// set up env\nif (process.cwd() !== callData.cwd) process.chdir(callData.cwd);\nfor (const key in process.env) delete process.env[key];\nassign(process.env, callData.env);\n\n// call function\nconst result = callFn(callData.filePath, callData.args);\n\nfs.writeFile(output + '.tmp', JSON.stringify(result), function () {\n  fs.rename(output + '.tmp', output, function () {\n    process.exit(0);\n  });\n});\n"],"names":["fs","require","JSONBuffer","assign","callFn","input","process","argv","output","callData","parse","readFileSync","cwd","chdir","key","env","result","filePath","args","writeFile","JSON","stringify","rename","exit"],"mappings":"AAAA;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC,AAAC;AACzB,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC,AAAC;AAC1C,IAAME,MAAM,GAAGF,OAAO,CAAC,aAAa,CAAC,AAAC;AACtC,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC,AAAC;AAEnC,WAAW;AACX,IAAMI,KAAK,GAAGC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,AAAC;AAC9B,IAAMC,MAAM,GAAGF,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,AAAC;AAC/B,IAAME,QAAQ,GAAGP,UAAU,CAACQ,KAAK,CAACV,EAAE,CAACW,YAAY,CAACN,KAAK,EAAE,MAAM,CAAC,CAAC,AAAC;AAElE,aAAa;AACb,IAAIC,OAAO,CAACM,GAAG,EAAE,KAAKH,QAAQ,CAACG,GAAG,EAAEN,OAAO,CAACO,KAAK,CAACJ,QAAQ,CAACG,GAAG,CAAC,CAAC;AAChE,IAAK,IAAME,GAAG,IAAIR,OAAO,CAACS,GAAG,CAAE,OAAOT,OAAO,CAACS,GAAG,CAACD,GAAG,CAAC,CAAC;AACvDX,MAAM,CAACG,OAAO,CAACS,GAAG,EAAEN,QAAQ,CAACM,GAAG,CAAC,CAAC;AAElC,gBAAgB;AAChB,IAAMC,MAAM,GAAGZ,MAAM,CAACK,QAAQ,CAACQ,QAAQ,EAAER,QAAQ,CAACS,IAAI,CAAC,AAAC;AAExDlB,EAAE,CAACmB,SAAS,CAACX,MAAM,GAAG,MAAM,EAAEY,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,EAAE,WAAY;IAChEhB,EAAE,CAACsB,MAAM,CAACd,MAAM,GAAG,MAAM,EAAEA,MAAM,EAAE,WAAY;QAC7CF,OAAO,CAACiB,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB,CAAC,CAAC;CACJ,CAAC,CAAC"}