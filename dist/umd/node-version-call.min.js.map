{"version":3,"file":"node-version-call.min.js","sources":["../../src/index.ts"],"sourcesContent":["const path = require('path');\nconst fs = require('fs');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst spawnSync = require('cross-spawn-cb').sync;\nconst JSONBuffer = require('json-buffer');\nconst callFn = require('./callFn');\n\nexport interface JSONObject {\n  [x: string]: any;\n}\nexport type CallOptions = {\n  args?: any[];\n  env?: JSONObject;\n};\n\nconst localCallFile = path.join(__dirname, 'localCall.js');\n\nfunction unlinkSafe(filename) {\n  try {\n    fs.unlinkSync(filename);\n  } catch {\n    // skip\n  }\n}\n\nexport default function call(filePath: string, version: string, options: CallOptions = {}): any {\n  const args = options.args || [];\n  let res;\n  if (version === 'local') res = callFn(filePath, args);\n  else {\n    const callData = { filePath, args };\n    const temp = tmpdir();\n    const inputFile = path.join(temp, suffix(\"nvc-input\"));\n    const outputFile = path.join(temp, suffix(\"nvc-output\"));\n\n    // store data to a file\n    fs.writeFileSync(inputFile, JSONBuffer.stringify(callData));\n    unlinkSafe(outputFile);\n\n    // call the function\n    const env = options.env || process.env;\n    spawnSync('nvu', [version, 'node', localCallFile, inputFile, outputFile], { env, stdio: 'string' });\n\n    // get data and clean up\n    res = JSONBuffer.parse(fs.readFileSync(outputFile, 'utf8'));\n    unlinkSafe(inputFile);\n    unlinkSafe(outputFile);\n  }\n\n  // res res\n  if (res.error) {\n    const err = new Error(res.error.message);\n    if (res.error.stack) err.stack = res.error.stack;\n    throw err;\n  }\n  return res.value;\n}\n"],"names":["path","require","fs","tmpdir","suffix","spawnSync","sync","JSONBuffer","callFn","localCallFile","join","__dirname","unlinkSafe","filename","unlinkSync","e","filePath","version","res","options","length","arguments","args","callData","temp","inputFile","outputFile","writeFileSync","stringify","env","process","stdio","parse","readFileSync","error","err","Error","message","stack","value"],"mappings":"gPAAA,IAAMA,EAAOC,QAAQ,QACfC,EAAKD,QAAQ,MACbE,EAASF,QAAQ,MAAME,QAAUF,QAAQ,WAAWE,OACpDC,EAASH,QAAQ,eACjBI,EAAYJ,QAAQ,kBAAkBK,KACtCC,EAAaN,QAAQ,eACrBO,EAASP,QAAQ,YAUjBQ,EAAgBT,EAAKU,KAAKC,UAAW,gBAE3C,SAASC,EAAWC,GAClB,IACEX,EAAGY,WAAWD,GACd,MAAME,YAKK,SAAcC,EAAkBC,OAEzCC,EAF0DC,EAAAA,UAAyBC,OAAA,QAAA,IAAAC,UAAA,GAAAA,UAAA,GAAF,GAC/EC,EAAOH,EAAQG,MAAQ,GAE7B,GAAgB,UAAZL,EAAqBC,EAAMV,EAAOQ,EAAUM,OAC3C,CACH,IAAMC,EAAW,CAAEP,SAAAA,EAAUM,KAAAA,GACvBE,EAAOrB,IACPsB,EAAYzB,EAAKU,KAAKc,EAAMpB,EAAO,cACnCsB,EAAa1B,EAAKU,KAAKc,EAAMpB,EAAO,eAG1CF,EAAGyB,cAAcF,EAAWlB,EAAWqB,UAAUL,IACjDX,EAAWc,GAGX,IAAMG,EAAMV,EAAQU,KAAOC,QAAQD,IACnCxB,EAAU,MAAO,CAACY,EAAS,OAAQR,EAAegB,EAAWC,GAAa,CAAEG,IAAAA,EAAKE,MAAO,WAGxFb,EAAMX,EAAWyB,MAAM9B,EAAG+B,aAAaP,EAAY,SACnDd,EAAWa,GACXb,EAAWc,GAIb,GAAIR,EAAIgB,MAAO,CACb,IAAMC,EAAM,IAAIC,MAAMlB,EAAIgB,MAAMG,SAEhC,MADInB,EAAIgB,MAAMI,QAAOH,EAAIG,MAAQpB,EAAIgB,MAAMI,OACrCH,EAER,OAAOjB,EAAIqB"}