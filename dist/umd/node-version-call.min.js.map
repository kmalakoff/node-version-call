{"version":3,"file":"node-version-call.min.js","sources":["../../src/index.ts"],"sourcesContent":["const path = require('path');\nconst fs = require('fs');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst spawnSync = require('cross-spawn-cb').sync;\nconst JSONBuffer = require('json-buffer');\nconst mkdirp = require('mkdirp');\nconst callFn = require('./callFn');\n\nexport interface JSONObject {\n  [x: string]: any;\n}\nexport type CallOptions = {\n  args?: any[];\n  env?: JSONObject;\n};\n\nconst localCallFile = path.join(__dirname, 'localCall.js');\n\nfunction unlinkSafe(filename) {\n  try {\n    fs.unlinkSync(filename);\n  } catch {\n    // skip\n  }\n}\n\nexport default function call(filePath: string, version: string, options: CallOptions = {}): any {\n  const args = options.args || [];\n  let res;\n  if (version === 'local') res = callFn(filePath, args);\n  else {\n    const temp = path.join(tmpdir(), 'nvc');\n    const input = path.join(temp, suffix('input'));\n    const output = path.join(temp, suffix('output'));\n\n    // store data to a file\n    const callData = { filePath, args };\n    mkdirp.sync(path.dirname(input));\n    fs.writeFileSync(input, JSONBuffer.stringify(callData));\n    unlinkSafe(output);\n\n    // call the function\n    const env = options.env || process.env;\n    spawnSync('nvu', [version, 'node', localCallFile, input, output], { env, stdio: 'string' });\n\n    // get data and clean up\n    res = JSONBuffer.parse(fs.readFileSync(output, 'utf8'));\n    unlinkSafe(input);\n    unlinkSafe(output);\n  }\n\n  // error res\n  if (res.error) {\n    const err = new Error(res.error.message);\n    if (res.error.stack) err.stack = res.error.stack;\n    throw err;\n  }\n  return res.value;\n}\n"],"names":["path","require","fs","tmpdir","suffix","spawnSync","sync","JSONBuffer","mkdirp","callFn","localCallFile","join","__dirname","unlinkSafe","filename","unlinkSync","e","filePath","version","res","options","length","arguments","args","temp","input","output","callData","dirname","writeFileSync","stringify","env","process","stdio","parse","readFileSync","error","err","Error","message","stack","value"],"mappings":"gPAAA,IAAMA,EAAOC,QAAQ,QACfC,EAAKD,QAAQ,MACbE,EAASF,QAAQ,MAAME,QAAUF,QAAQ,WAAWE,OACpDC,EAASH,QAAQ,eACjBI,EAAYJ,QAAQ,kBAAkBK,KACtCC,EAAaN,QAAQ,eACrBO,EAASP,QAAQ,UACjBQ,EAASR,QAAQ,YAUjBS,EAAgBV,EAAKW,KAAKC,UAAW,gBAE3C,SAASC,EAAWC,GAClB,IACEZ,EAAGa,WAAWD,GACd,MAAME,YAKK,SAAcC,EAAkBC,OAEzCC,EAF0DC,EAAAA,UAAyBC,OAAA,QAAA,IAAAC,UAAA,GAAAA,UAAA,GAAF,GAC/EC,EAAOH,EAAQG,MAAQ,GAE7B,GAAgB,UAAZL,EAAqBC,EAAMV,EAAOQ,EAAUM,OAC3C,CACH,IAAMC,EAAOxB,EAAKW,KAAKR,IAAU,OAC3BsB,EAAQzB,EAAKW,KAAKa,EAAMpB,EAAO,UAC/BsB,EAAS1B,EAAKW,KAAKa,EAAMpB,EAAO,WAGhCuB,EAAW,CAAEV,SAAAA,EAAUM,KAAAA,GAC7Bf,EAAOF,KAAKN,EAAK4B,QAAQH,IACzBvB,EAAG2B,cAAcJ,EAAOlB,EAAWuB,UAAUH,IAC7Cd,EAAWa,GAGX,IAAMK,EAAMX,EAAQW,KAAOC,QAAQD,IACnC1B,EAAU,MAAO,CAACa,EAAS,OAAQR,EAAee,EAAOC,GAAS,CAAEK,IAAAA,EAAKE,MAAO,WAGhFd,EAAMZ,EAAW2B,MAAMhC,EAAGiC,aAAaT,EAAQ,SAC/Cb,EAAWY,GACXZ,EAAWa,GAIb,GAAIP,EAAIiB,MAAO,CACb,IAAMC,EAAM,IAAIC,MAAMnB,EAAIiB,MAAMG,SAEhC,MADIpB,EAAIiB,MAAMI,QAAOH,EAAIG,MAAQrB,EAAIiB,MAAMI,OACrCH,EAER,OAAOlB,EAAIsB"}